" ideavim's configurations

" basic settings
set number relativenumber
set encoding=utf-8
set clipboard+=unnamed
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
set sidescroll=4
set sidescrolloff=15
let mapleader=" "
" Do incremental searching.
set incsearch
set hlsearch
set ignorecase
set smartcase
" match between < and > characters
set matchpairs+=<:>
set matchpairs+==:;

set showcmd
" set nowrapscan
" Don't use Ex mode, use Q for formatting.
map Q gq

" idea specific settings
set idearefactormode=keep
set ideajoin
set ideaput
set ideamarks
set gdefault " set g flag for substitute

" edit ideavim config
nnoremap <leader>T :e ~/.config/ideavim/ideavimrc<CR>
nnoremap <leader>Z :action IdeaVim.ReloadVimRc.reload<CR>
" don't overwrite register when pasting over selection
vnoremap p pgvy
nmap =p :put *<CR>
nmap =P :-1put *<CR>
" not moving previous cursor position after yanking a region.
vmap y ygv<Esc>

" basic mappings
map 0 _
nmap Y y$
vnoremap <C-c> y
vmap <C-v> p
imap <C-v> <esc>pa
map <S-C-v> p
noremap > >>
noremap < <<
vnoremap > >gv
vnoremap < <gv

" remove system clipboard setting otherwise the multiple cursor cannot work.
map <leader>ocb :set cb-=unnamed<CR>
map <leader>ocB :set cb+=unnamed<CR>

map <leader><cr> :noh<cr>
map <leader>qq <Action>(CloseContent)
map <leader>qa <Action>(CloseAllEditorsButActive)

" map <leader><tab> <Action>(CloseAllToTheRight)
map <leader><S-tab> <Action>(CloseAllEditorsButActive)
nmap <leader>? <Action>(GotoAction)<CR>
map <c-h> <c-w><c-h>
map <c-j> <c-w><c-j>
map <c-k> <c-w><c-k>
map <c-l> <c-w><c-l>

imap <c-a> <c-o>_
imap <c-k> <c-o>C
imap <c-e> <end>
imap <c-f> <right>
imap <c-b> <left>
imap <a-f> <c-o>e<c-f>
imap <a-b> <c-o>b

" Make K the logical opposite of J.
nnoremap gK a<CR><Esc>k$
" Q plays back q macro.
nnoremap Q @q

nnoremap cn cgn
" Easier substitution.
nnoremap <Leader>, :%s/
xnoremap <Leader>, :s/
" Split line on a comma.
nnoremap \ f,a<CR><Esc>^
" Split function arguments or list members into their own lines.
nnoremap <Leader>\ mq^f,`qv%J`qa<CR><Esc>k$%i<CR><Esc>k:s/, *\($\)\@!/,\r<CR>:noh<CR>`qv%=`q


" Type a delimiter for splitting the line into separate lines.
nnoremap <Leader><Leader>\ :s//&\r<Left><Left><Left><Left>
xnoremap <Leader><Leader>\ :s//&\r<Left><Left><Left><Left>

map <c-w>m <Action>(MaximizeEditorInSplit)
map <c-w>+ <Action>(StretchSplitToTop)
map <c-w>- <Action>(StretchSplitToBottom)
map <c-w>< <Action>(StretchSplitToLeft)
map <c-w>> <Action>(StretchSplitToRight)

" jump out brackets quickly
inoremap <a-o> <Esc>/[)}"'\]>`]<CR>:nohl<CR>a
inoremap <a-i> <Esc>?[({"'\[<`]<CR>:nohl<CR>a
map <C-t> <action>(EmacsStyleIndent)
imap <C-t> <action>(EmacsStyleIndent)
imap <c-h> <Action>(EditorBackSpace)
imap <c-d> <del>
" map i i<C-f>
" split windows
map <leader>- <Action>(SplitHorizontally)
map <leader>\| <Action>(SplitVertically)
imap <C-]> <c-o>f<right>

" find and replace
map <leader>ff <Action>(GotoClass)
map <leader>fa <Action>(FindInPath)
map <leader>bb <Action>(RecentFiles)
map <leader>gf <Action>(Find)
map <leader>gr <Action>(Replace)

nmap <leader>fc <Action>(NewClass)
" navigation
map <C-o> <action>(Back)
map <C-i> <action>(Forward)

map gd <Action>(GotoDeclaration)zz
map gi <Action>(GotoImplementation)zz
map gy <Action>(GotoTypeDeclaration)zz
map gr <Action>(ShowUsages)zz
map gt <Action>(GotoSuperMethod)zz

map [g <Action>(GotoPreviousError)
map ]g <Action>(GotoNextError)
map [n <Action>(VcsShowPrevChangeMarker)
map ]n <Action>(VcsShowNextChangeMarker)
map [c <Action>(VcsShowPrevChangeMarker)
map ]c <Action>(VcsShowNextChangeMarker)
map go <Action>(FileStructurePopup)
map gO <Action>(GotoSymbol)

map [<leader> <Action>(EditorStartNewLineBefore)
map ]<leader> <Action>(EditorStartNewLine)

map [e <Action>(MoveLineUp)
map ]e <Action>(MoveLineDown)
" refactor
map <leader>rn <Action>(RenameElement)
map <leader>rs <Action>(ChangeSignature)
map <leader>rem <Action>(ExtractMethod)
map <leader>rev <Action>(IntroduceVariable)
map <leader>rec <Action>(IntroduceConstant)
map <leader>ref <Action>(IntroduceField)

" convert words case
map crs <Action>(StringManipulation.ToSnakeCase)<esc>
map crm <Action>(StringManipulation.ToPascalCase)<esc>
map crc <Action>(StringManipulation.ToCamelCase)<esc>
map cru <Action>(StringManipulation.ToScreamingSnakeCase)<esc>
map cr- <Action>(StringManipulation.ToKebabCase)<esc>
map cr. <Action>(StringManipulation.ToDotCase)<esc>
map cr<space> <Action>(osmedile.intellij.stringmanip.ToLowerCaseAction)<esc>
map crt <Action>(StringManipulation.ToPascalCase)<esc>
" debug
" Map \r to the Reformat Code action
map \r <Action>(ReformatCode)

" Map <leader>d to start debug
map <leader>rr <Action>(Run)
map <leader>rd <Action>(Debug)

" Map \b to toggle the breakpoint on the current line
nmap <leader>db <Action>(ToggleLineBreakpoint)
nmap <leader>dc <Action>(Resume)
nmap <leader>dC <Action>(ResumeRunToCursor)
nmap <leader>de <Action>(QuickEvaluateExpression)
nmap <leader>di <Action>(StepInto)
nmap <leader>ds <Action>(StepOver)

nmap <leader><tab> <C-6>

" actions
nmap <leader>tm <action>(MoveEditorToOppositeTabGroup)
nmap <leader>tc <action>(Unsplit)
nmap <leader>h <action>(PreviousTab)
nmap <leader>l <action>(NextTab)
nmap <leader>bd <action>(CloseEditor)
nmap <leader>i <action>(Generate)
nmap <leader>m <action>(Git.Menu)
nmap <leader>s <action>(QuickChangeScheme)
nmap <leader>/ <action>(ShowErrorDescription)
nmap <leader>n <action>(GotoNextError)
nmap <leader>p <action>(GotoPreviousError)
nnoremap <leader><leader> <C-Tab>

nmap <leader>ro :action OptimizeImports<CR>
nmap <leader>rG :action Generate<CR>
nmap <leader>cl <Action>(OptimizeImports)<Action>(ReformatCode)<CR>
nmap <leader>ar  :action ExternalSystem.ProjectRefreshAction<CR>
nmap <leader>aa <Action>(GotoAction)<CR>
nmap <leader>au <Action>(GotoUrlAction)<CR>
nmap <leader>fs <Action>(GoToRequestMapping)<CR>

imap <a-p> <c-o><Action>(ParameterInfo)i

nmap <leader>gi <Action>(ImplementMethods)
nmap <leader>go <Action>(OverrideMethods)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
nmap [[ <Action>(EditorCodeBlockStart)
nmap ]] <Action>(EditorCodeBlockEnd)
map gh <Action>(QuickJavaDoc)

nmap <leader>gl <Action>(Vcs.UpdateProject)
nmap <leader>ga <Action>(CheckinProject)
nmap <leader>gp <Action>(Vcs.Push)
nmap <leader>gr <Action>(Vcs.RollbackChangedLines)

nmap g; <Action>(JumpToLastChange)
nmap g, <Action>(JumpToNextChange)

" Toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
nmap <leader>i ~hi
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~h

" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
nmap [q <Action>(GotoPrevElementUnderCaretUsage)

imap <a-,> <Action>(CodeCompletion)
imap <c-a-0> <Action>(xyz.zono.plugin.InputSequenceAction)

function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

nnoremap gs :call Invert(0)<CR>
vnoremap gs :<C-u>call Invert(1)<CR>



" plugins
" IdeaVimExtension
" set keep-english-in-normal
" disable restoring input method according to the context
set keep-english-in-normal-and-restore-in-insert
let context_aware=0
map <leader>tw :s/\//\\\\/g<CR>
map <leader>tu :s/\\\\/\//g<CR>
"南通街
" Plugins
Plug 'easymotion/vim-easymotion'
" map f <Plug>(easymotion-bd-fl)
" map F <Plug>(easymotion-lineforward)


" nmap f <Plug>(easymotion-lineforward)
" nmap F <Plug>(easymotion-linebackward)

Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-scripts/argtextobj.vim'
let g:argtextobj_pairs="(:),{:},<:>"

Plug 'tommcdo/vim-exchange'
Plug 'machakann/vim-highlightedyank'
Plug 'michaeljsmith/vim-indent-object'
Plug 'vim-matchit'
Plug 'vim-scripts/ReplaceWithRegister'

Plug 'vim-commentary'

map s gr
map S grr

Plug 'preservim/nerdtree'
set vim-paragraph-motion
set quickscope
set textobj-entire


eval nohl

" +admin+
vnoremap <silent> i+ :<C-u>normal! T+vt+<CR>
vnoremap <silent> ib :<C-u>normal! ?[({"'\[<`]<CR><right>v/[)}"'\]>`]<CR><left><left><ESC>:nohl<CR>gv
onoremap <silent> i+ :<C-u>normal! ggVG<CR>



